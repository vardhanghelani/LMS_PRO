generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model item_tran {
  tran_id           Int                 @id @default(autoincrement())
  item_id           Int?
  status            item_tran_status?   @default(available)
  user_id           Int?
  record_status     record_status?      @default(active)
  library_items     library_items?      @relation(fields: [item_id], references: [item_id], onDelete: Restrict, onUpdate: Restrict)
  users             users?              @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict)
  item_tran_history item_tran_history[]
  notifications     notifications[]

  @@index([item_id], map: "item_id")
  @@index([user_id], map: "user_id")
}

model item_tran_history {
  id                                          Int                      @id @default(autoincrement())
  item_id                                     Int?
  tran_id                                     Int?
  status                                      item_tran_history_status @default(pending)
  requested_by                                Int?
  approved_by                                 Int?
  requested_at                                DateTime?                @default(now()) @db.DateTime(0)
  approved_at                                 DateTime?                @db.DateTime(0)
  date_issued                                 DateTime?                @db.Date
  date_due                                    DateTime?                @db.Date
  date_returned                               DateTime?                @db.Date
  remarks                                     String?                  @db.Text
  library_items                               library_items?           @relation(fields: [item_id], references: [item_id], onDelete: Restrict, onUpdate: Restrict)
  item_tran                                   item_tran?               @relation(fields: [tran_id], references: [tran_id], onDelete: Restrict, onUpdate: Restrict)
  users_item_tran_history_requested_byTousers users?                   @relation("item_tran_history_requested_byTousers", fields: [requested_by], references: [user_id], onDelete: Restrict, onUpdate: Restrict)
  users_item_tran_history_approved_byTousers  users?                   @relation("item_tran_history_approved_byTousers", fields: [approved_by], references: [user_id], onDelete: Restrict, onUpdate: Restrict)
  fines                                       fines[]

  @@index([approved_by], map: "approved_by")
  @@index([item_id], map: "item_id")
  @@index([requested_by], map: "requested_by")
  @@index([tran_id], map: "tran_id")
}

model library_items {
  item_id           Int                 @id @default(autoincrement())
  title             String?             @db.VarChar(255)
  author            String              @db.VarChar(255)
  isbn              String?             @db.VarChar(20)
  year              Int?                @db.Year
  genre             String?             @db.VarChar(100)
  image_url         String?             @db.Text
  description       String?             @db.Text
  librarian_id      Int?
  item_type         library_item_type   @default(book)
  location          String?             @db.VarChar(100)
  publisher         String?             @db.VarChar(255)
  language          String?             @db.VarChar(50)
  pages             Int?
  duration          Int? // For multimedia items (in minutes)
  format            String?             @db.VarChar(50) // For multimedia: DVD, CD, etc.
  subject           String?             @db.VarChar(100)
  keywords          String?             @db.Text
  created_at        DateTime?           @default(now()) @db.DateTime(0)
  updated_at        DateTime?           @default(now()) @db.DateTime(0)
  record_status     record_status?      @default(active)
  item_tran         item_tran[]
  item_tran_history item_tran_history[]
  notifications     notifications[]
  user_wishlist     user_wishlist[]
}

model fines {
  fine_id              Int                @id @default(autoincrement())
  user_id              Int?
  item_tran_history_id Int?
  amount               Decimal?           @db.Decimal(10, 2)
  reason               String?            @db.Text
  status               fines_status?      @default(unpaid)
  created_at           DateTime?          @default(now()) @db.DateTime(0)
  paid_at              DateTime?          @db.DateTime(0)
  users                users?             @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "fines_ibfk_1")
  item_tran_history    item_tran_history? @relation(fields: [item_tran_history_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([item_tran_history_id], map: "item_tran_history_id")
  @@index([user_id], map: "user_id")
}

model logs {
  log_id      Int       @id @default(autoincrement())
  description String    @db.Text
  user_id     Int
  created_at  DateTime? @default(now()) @db.DateTime(0)
  users       users     @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "logs_ibfk_1")

  @@index([user_id], map: "user_id")
}

model notifications {
  notification_id                         Int                   @id @default(autoincrement())
  type                                    notifications_type?
  item_id                                 Int?
  from_user_id                            Int?
  to_user_id                              Int?
  tran_id                                 Int?
  reservation_id                          Int?
  status                                  notifications_status? @default(pending)
  message                                 String?               @db.Text
  created_at                              DateTime?             @default(now()) @db.DateTime(0)
  resolved_at                             DateTime?             @db.DateTime(0)
  library_items                           library_items?        @relation(fields: [item_id], references: [item_id], onDelete: Restrict, onUpdate: Restrict)
  users_notifications_from_user_idTousers users?                @relation("notifications_from_user_idTousers", fields: [from_user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_2")
  users_notifications_to_user_idTousers   users?                @relation("notifications_to_user_idTousers", fields: [to_user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_3")
  item_tran                               item_tran?            @relation(fields: [tran_id], references: [tran_id], onDelete: Restrict, onUpdate: Restrict)

  @@index([item_id], map: "item_id")
  @@index([from_user_id], map: "from_user_id")
  @@index([to_user_id], map: "to_user_id")
  @@index([tran_id], map: "tran_id")
  @@index([reservation_id], map: "reservation_id")
}

model user_wishlist {
  id            Int            @id @default(autoincrement())
  user_id       Int?
  item_id       Int?
  created_at    DateTime?      @default(now()) @db.DateTime(0)
  users         users?         @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "user_wishlist_ibfk_1")
  library_items library_items? @relation(fields: [item_id], references: [item_id], onDelete: Restrict, onUpdate: Restrict)

  @@index([item_id], map: "item_id")
  @@index([user_id], map: "user_id")
}

model users {
  user_id                                                 Int                 @id @default(autoincrement())
  name                                                    String?             @db.VarChar(100)
  email                                                   String?             @unique(map: "email") @db.VarChar(100)
  password_hash                                           String?             @db.VarChar(255)
  role                                                    users_role?         @default(patron)
  status                                                  users_status?       @default(active)
  created_at                                              DateTime?           @default(now()) @db.DateTime(0)
  updated_at                                              DateTime?           @default(now()) @db.DateTime(0)
  gender                                                  gender?             @default(male)
  phone_number                                            String?             @db.VarChar(20)
  birth_date                                              DateTime?           @db.DateTime(0)
  address                                                 String?             @db.VarChar(255)
  profile_image_url                                       String?             @db.VarChar(255)
  item_tran                                               item_tran[]
  item_tran_history_item_tran_history_requested_byTousers item_tran_history[] @relation("item_tran_history_requested_byTousers")
  item_tran_history_item_tran_history_approved_byTousers  item_tran_history[] @relation("item_tran_history_approved_byTousers")
  fines                                                   fines[]
  logs                                                    logs[]
  notifications_notifications_from_user_idTousers         notifications[]     @relation("notifications_from_user_idTousers")
  notifications_notifications_to_user_idTousers           notifications[]     @relation("notifications_to_user_idTousers")
  user_wishlist                                           user_wishlist[]
  library_cards                                           library_cards[]
}

model contact_us {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(100)
  email      String?   @db.VarChar(255)
  subject    String?   @db.VarChar(255)
  message    String?   @db.Text
  created_at DateTime? @default(now()) @db.DateTime(0)
}

model system_config {
  config_id    Int      @id @default(autoincrement())
  config_key   String   @unique @db.VarChar(100)
  config_value String   @db.Text
  description  String?  @db.VarChar(255)
  updated_at   DateTime @default(now()) @updatedAt @db.DateTime(0)
}

model library_cards {
  card_id     Int         @id @default(autoincrement())
  user_id     Int?
  card_number String      @unique @db.VarChar(50)
  issued_at   DateTime    @default(now()) @db.DateTime(0)
  expires_at  DateTime?   @db.DateTime(0)
  status      card_status @default(active)
  users       users?      @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict)

  @@index([user_id], map: "user_id")
}

enum record_status {
  active
  inactive
}

enum notifications_type {
  issue
  return
  overdue
  reservation_available
  reservation_expired
  fine_due
  system_maintenance
  new_item_added
  item_damaged
  item_lost
}

enum users_role {
  patron
  librarian
  admin
}

enum fines_status {
  unpaid
  paid
}

enum users_status {
  active
  banned
}

enum notifications_status {
  pending
  approved
  rejected
}

enum gender {
  male
  female
  other
}

enum library_item_type {
  book
  journal
  multimedia
  newspaper
  magazine
  thesis
  report
  other
}

enum item_tran_status {
  available
  not_available @map("not available")
  reserved
  lost
  damaged
}

enum item_tran_history_status {
  issued
  returned
  pending
  rejected
  overdue
}

enum reservation_status {
  pending
  active
  expired
  cancelled
  fulfilled
}

enum card_status {
  active
  expired
  suspended
  cancelled
}
