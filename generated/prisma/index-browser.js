
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Item_tranScalarFieldEnum = {
  tran_id: 'tran_id',
  item_id: 'item_id',
  status: 'status',
  user_id: 'user_id',
  record_status: 'record_status'
};

exports.Prisma.Item_tran_historyScalarFieldEnum = {
  id: 'id',
  item_id: 'item_id',
  tran_id: 'tran_id',
  status: 'status',
  requested_by: 'requested_by',
  approved_by: 'approved_by',
  requested_at: 'requested_at',
  approved_at: 'approved_at',
  date_issued: 'date_issued',
  date_due: 'date_due',
  date_returned: 'date_returned',
  remarks: 'remarks'
};

exports.Prisma.Library_itemsScalarFieldEnum = {
  item_id: 'item_id',
  title: 'title',
  author: 'author',
  isbn: 'isbn',
  year: 'year',
  genre: 'genre',
  image_url: 'image_url',
  description: 'description',
  librarian_id: 'librarian_id',
  item_type: 'item_type',
  location: 'location',
  publisher: 'publisher',
  language: 'language',
  pages: 'pages',
  duration: 'duration',
  format: 'format',
  subject: 'subject',
  keywords: 'keywords',
  created_at: 'created_at',
  updated_at: 'updated_at',
  record_status: 'record_status'
};

exports.Prisma.FinesScalarFieldEnum = {
  fine_id: 'fine_id',
  user_id: 'user_id',
  item_tran_history_id: 'item_tran_history_id',
  amount: 'amount',
  reason: 'reason',
  status: 'status',
  created_at: 'created_at',
  paid_at: 'paid_at'
};

exports.Prisma.LogsScalarFieldEnum = {
  log_id: 'log_id',
  description: 'description',
  user_id: 'user_id',
  created_at: 'created_at'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  notification_id: 'notification_id',
  type: 'type',
  item_id: 'item_id',
  from_user_id: 'from_user_id',
  to_user_id: 'to_user_id',
  tran_id: 'tran_id',
  reservation_id: 'reservation_id',
  status: 'status',
  message: 'message',
  created_at: 'created_at',
  resolved_at: 'resolved_at'
};

exports.Prisma.User_wishlistScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  item_id: 'item_id',
  created_at: 'created_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  gender: 'gender',
  phone_number: 'phone_number',
  birth_date: 'birth_date',
  address: 'address',
  profile_image_url: 'profile_image_url'
};

exports.Prisma.Contact_usScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  subject: 'subject',
  message: 'message',
  created_at: 'created_at'
};

exports.Prisma.System_configScalarFieldEnum = {
  config_id: 'config_id',
  config_key: 'config_key',
  config_value: 'config_value',
  description: 'description',
  updated_at: 'updated_at'
};

exports.Prisma.Library_cardsScalarFieldEnum = {
  card_id: 'card_id',
  user_id: 'user_id',
  card_number: 'card_number',
  issued_at: 'issued_at',
  expires_at: 'expires_at',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.item_tran_historyOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};

exports.Prisma.library_itemsOrderByRelevanceFieldEnum = {
  title: 'title',
  author: 'author',
  isbn: 'isbn',
  genre: 'genre',
  image_url: 'image_url',
  description: 'description',
  location: 'location',
  publisher: 'publisher',
  language: 'language',
  format: 'format',
  subject: 'subject',
  keywords: 'keywords'
};

exports.Prisma.finesOrderByRelevanceFieldEnum = {
  reason: 'reason'
};

exports.Prisma.logsOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.notificationsOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  phone_number: 'phone_number',
  address: 'address',
  profile_image_url: 'profile_image_url'
};

exports.Prisma.contact_usOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  subject: 'subject',
  message: 'message'
};

exports.Prisma.system_configOrderByRelevanceFieldEnum = {
  config_key: 'config_key',
  config_value: 'config_value',
  description: 'description'
};

exports.Prisma.library_cardsOrderByRelevanceFieldEnum = {
  card_number: 'card_number'
};
exports.item_tran_status = exports.$Enums.item_tran_status = {
  available: 'available',
  not_available: 'not_available',
  reserved: 'reserved',
  lost: 'lost',
  damaged: 'damaged'
};

exports.record_status = exports.$Enums.record_status = {
  active: 'active',
  inactive: 'inactive'
};

exports.item_tran_history_status = exports.$Enums.item_tran_history_status = {
  issued: 'issued',
  returned: 'returned',
  pending: 'pending',
  rejected: 'rejected',
  overdue: 'overdue'
};

exports.library_item_type = exports.$Enums.library_item_type = {
  book: 'book',
  journal: 'journal',
  multimedia: 'multimedia',
  newspaper: 'newspaper',
  magazine: 'magazine',
  thesis: 'thesis',
  report: 'report',
  other: 'other'
};

exports.fines_status = exports.$Enums.fines_status = {
  unpaid: 'unpaid',
  paid: 'paid'
};

exports.notifications_type = exports.$Enums.notifications_type = {
  issue: 'issue',
  return: 'return',
  overdue: 'overdue',
  reservation_available: 'reservation_available',
  reservation_expired: 'reservation_expired',
  fine_due: 'fine_due',
  system_maintenance: 'system_maintenance',
  new_item_added: 'new_item_added',
  item_damaged: 'item_damaged',
  item_lost: 'item_lost'
};

exports.notifications_status = exports.$Enums.notifications_status = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.users_role = exports.$Enums.users_role = {
  patron: 'patron',
  librarian: 'librarian',
  admin: 'admin'
};

exports.users_status = exports.$Enums.users_status = {
  active: 'active',
  banned: 'banned'
};

exports.gender = exports.$Enums.gender = {
  male: 'male',
  female: 'female',
  other: 'other'
};

exports.card_status = exports.$Enums.card_status = {
  active: 'active',
  expired: 'expired',
  suspended: 'suspended',
  cancelled: 'cancelled'
};

exports.Prisma.ModelName = {
  item_tran: 'item_tran',
  item_tran_history: 'item_tran_history',
  library_items: 'library_items',
  fines: 'fines',
  logs: 'logs',
  notifications: 'notifications',
  user_wishlist: 'user_wishlist',
  users: 'users',
  contact_us: 'contact_us',
  system_config: 'system_config',
  library_cards: 'library_cards'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
